Dashboard

Imports System.Windows.Forms.VisualStyles.VisualStyleElement.Button

Public Class Dashboard

    Private Sub Dashboard_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        checkButtons()
    End Sub
    Sub checkButtons()
        If loggedInName.Length > 0 Then 'If the user has logged into the system, the buttons are active
            Logbutton.Enabled = False
            Outbutton.Enabled = True
            If userType = "Admin" Then
                ButtonEditUsers.Enabled = True  'button for Edit users
            End If
            ButtonEditContent.Enabled = True  'button for edit content
            If userType = "Admin" Or userType = "Reviewer" Then
                ButtonEditComments.Enabled = True  'button for edit comment
            End If
        Else
            Logbutton.Enabled = True   'If user has not logged into the system then the buttons are inactive
            Outbutton.Enabled = False
            ButtonEditUsers.Enabled = False
            ButtonEditContent.Enabled = False
            ButtonEditComments.Enabled = False
        End If
    End Sub
    Private Sub Logbutton_Click(sender As System.Object, e As System.EventArgs) Handles Logbutton.Click
        Dim loginDlg As New Login

        If loginDlg.ShowDialog() = Windows.Forms.DialogResult.OK Then
            MessageBox.Show("You have Successfully Logged into the system")         'If the user is able to login this message should appear
            checkButtons()
        Else
            checkButtons()
            If failCount > 2 Then           ' counting the failed logins

                Me.Close()
            Else
                MessageBox.Show("Sorry Try Again")      'This message should apper when the user is unable to login

                'I was able to look at the website www.vb-helper.com/howto_net_login_form.html, this helped me to presented a message to users

                'Users need to informed about logging to a system, if it both fails or success based on their login information.
            End If
        End If 
End Sub
    Private Sub Outbutton_Click(sender As System.Object, e As System.EventArgs) Handles Outbutton.Click
        If loggedInName.Length > 0 Then
            Logout.ShowDialog()
            checkButtons()
        End If
    End Sub

    Private Sub User_Click(sender As System.Object, e As System.EventArgs) Handles ButtonEditUsers.Click

        If loggedInName.Length > 0 And userType = "Admin" Then  'only the Admin can enter this section
            EditUser.ShowDialog()
        End If
    End Sub

    Private Sub Contentbutton_Click(sender As System.Object, e As System.EventArgs) Handles ButtonEditContent.Click
        Dim contentDlg As New EditContent 'All content on the textbox should not appear when the user reopens the form
        If loggedInName.Length > 0 Then
            contentDlg.ShowDialog()
        End If
    End Sub

    Private Sub Commentsbutton_Click(sender As System.Object, e As System.EventArgs) Handles ButtonEditComments.Click
        Dim commentDlg As New EditComments  ' this is used to refesh the form whilst the user has reopened the form
        If loggedInName.Length > 0 Then
            EditComments.ShowDialog()
        End If
    End Sub

    
    Private Sub ButtonOpenHomepage_Click(sender As System.Object, e As System.EventArgs) Handles ButtonOpenHomepage.Click
        System.Diagnostics.Process.Start("http://localhost:8080//")
    End Sub
End Class









Database Connection

Module Database
    'These methods can be used to perform common database operations...

    'Filepath and name of database - update this to contain the actual location of your database / 
    'application:
    Dim DBpath As String = "D:\Users\Sukhraj Sumal\University\Second Year\Business Programming\Coursework 2- Code Review Site\Code Review Site\Code Review Site\Login Database.accdb"

    Dim myCon As New OleDb.OleDbConnection 'Creates a new Connection object
    'The data adaptor is used to fill a DataSet and perform other database operations...
    Dim myDataAdapter As OleDb.OleDbDataAdapter
    'The DataSet contains data retrieved from the database (using the data adaptor).

    'This function connects to the database. The connection is stored in global object 'myCon' and can
    'then be accessed as needed by other functions. Also includes an example of error handling using
    'Try-Catch.
    Function OpenConnection()
        Try
            'Specifies the connection string needed to connect to the database (including DB location)
            myCon.ConnectionString = "PROVIDER=Microsoft.ACE.OLEDB.12.0;Data Source =" & DBpath

            myCon.Open() 'connect to database
            'MsgBox("Success!", MsgBoxStyle.Information, "Connected to Database")
            Return True 'end function

        Catch ex As Exception
            'Show message box if any problems occur when connecting ('ex.Message' will display info 
            'about the error)
            MsgBox("Cannot connect to database: " & ex.Message, MsgBoxStyle.Critical, _
            "Connection Error!")
            Return False
        End Try
    End Function

    'This subroutine retrieves all data from a database table and puts it inside a DataSet 
    '(using the DataAdaptor).
    Sub GetData(ByVal DBtable As String, ByRef myDataSet As DataSet)
        'SQL statement to retrieve all data from the specified table
        Dim sql As String = "SELECT * FROM " & DBtable

        'Create instance of data adapter object using specified SQL string and database connection.
        myDataAdapter = New OleDb.OleDbDataAdapter(sql, myCon)

        'Create new DataSet
        myDataSet = New DataSet

        'Use the data adaptor to fill the DataSet (so it contains all records retrieved from DB)
        myDataAdapter.Fill(myDataSet)
    End Sub

    'This subroutine retrieves records meeting the specified criteria and puts them inside a DataSet.
    'E.g. to retrieve all records with a surname beginning with A, use this code:
    '    GetFilteredData("surname LIKE 'A%'")
    Sub GetFilteredData(ByVal DBtable As String, ByVal criteria As String, ByRef myDataSet As DataSet)
        'SQL statement to retrieve data meeting the specified criteria from the specified table
        Dim sql As String = "SELECT * FROM " & DBtable & " WHERE " & criteria & ";"

        'Create instance of data adapter object using specified SQL string and database connection.
        myDataAdapter = New OleDb.OleDbDataAdapter(sql, myCon)

        'Create new DataSet
        myDataSet = New DataSet

        'Use the data adaptor to fill the DataSet (so it contains all records retrieved from DB)
        myDataAdapter.Fill(myDataSet)
    End Sub

    'This function returns the number of records in the DataSet.
    Function CountRecords(ByRef myDataSet As DataSet)
        Return myDataSet.Tables(0).Rows.Count()
    End Function

    'This function returns the value of a field in a specific record in the DataSet. Use after running
    'the GetData() or GetFilteredData() subroutine above.
    '
    'E.g. To fill a textbox (called 'TextBox1') with the surname of the second user in your database, 
    'use this code: 
    '    TextBox1.Text = GetDBvalue(2,3)
    'This sets recordNum to 2 (to retrieve the details of the 2nd user), and fieldNum to 3 (to retrieve 
    'the value of the 3rd field in the DB table - the 'surname' field in this case).
    Function GetDsValue(ByVal recordNum As Integer, ByVal fieldNum As Integer, ByRef myDataSet As DataSet)
        Return myDataSet.Tables(0).Rows(recordNum - 1).Item(fieldNum - 1)
        '[Note: for simplicity, this function accepts 1-based numbers and converts them into 0-based]
    End Function

    'This subroutine adds data to a new record in the database. To run, you need to specify the names 
    'of the fields to insert (separated by commas), followed by the values of these fields 
    '(separated by commas) - e.g.
    '    AddData( "firstname, surname" , "'Ken', 'Boness'" )
    '[Note: if the field values are strings, remember to surround them with quotes (as shown) - ' ]
    Sub AddData(ByVal DBtable As String, ByVal fieldNames As String, ByVal fieldVals As String)
        'Assemble SQL query to add data to the database based on the values passed to this function.
        Dim sql As String = "INSERT INTO " & DBtable & " (" & fieldNames & ") VALUES (" & fieldVals & ")"

        'Create an instance of data adapter (if not created already)
        myDataAdapter = New OleDb.OleDbDataAdapter()

        'Add command to insert data (using data adaptor) based on SQL query above.
        myDataAdapter.InsertCommand = New OleDb.OleDbCommand(sql, myCon)
        'Execute command to insert data into a new database record
        myDataAdapter.InsertCommand.ExecuteNonQuery()
    End Sub

    'This subroutine updates the specified record(s) with new values. To run, you need to specify the 
    'new value(s)of the relevant field(s), as well as which record(s) to update - e.g.
    '    UpdateData( "surname = 'Boness'" , "id = 1" )
    'This will change the surname of record 1 to 'Boness' (note the arrangement of quotes)
    Sub UpdateData(ByVal DBtable As String, ByVal dataToUpdate As String, ByVal updateCriteria As String)
        'Assemble SQL query to update the specified record(s) with the specified value(s)
        Dim sql As String = "UPDATE " & DBtable & " SET " & dataToUpdate & " WHERE " & updateCriteria

        'Create an instance of data adapter (if not created already)
        myDataAdapter = New OleDb.OleDbDataAdapter()

        'Add command to update data (using data adaptor) based on SQL query above.
        myDataAdapter.UpdateCommand = New OleDb.OleDbCommand(sql, myCon)
        'Execute command to update data in the relevant database record(s)
        myDataAdapter.UpdateCommand.ExecuteNonQuery()
    End Sub

    'Closes the database connection - it is a good idea to do this when no longer required...
    Sub CloseCon()
        myCon.Close()
    End Sub

End Module



Edit Comments Form

Imports System.IO
Public Class EditComments

    Private Sub EditComments_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load

    End Sub

    Private Sub ADD_Click(sender As System.Object, e As System.EventArgs) Handles ADD.Click

        Dim filename = "N:\Business Programming\Code Review WebRoot\" & ebox.Text & "\comments.txt"
        Dim comment As String = ""
        If Dir(filename) <> "" Then ' read existing comments file if it exists
            Dim myStream As New StreamReader(filename)
            comment = myStream.ReadToEnd
            myStream.Close()
        End If

        comment += ComBox.Text + vbCrLf

        Dim myWriteStream As New StreamWriter(filename)  ' write out comments again
        myWriteStream.Write(comment)
        myWriteStream.Close()
        MsgBox("Comment added")
    End Sub
End Class

Edit Content Form

Imports System.IO
Public Class EditContent

    Private Property DictionaryEntry As Object

    Private Sub ButtonOpen_Click(sender As System.Object, e As System.EventArgs) Handles ButtonOpen.Click
        'I was able to reference this code from http://www.techrepublic.com/blog/programming-and-development/let-users-pick-a-file-to-open-via-openfiledialog-in-vbnet/481
        If userType <> "Admin" Then
            OpenFileDialog1.InitialDirectory = "N:\Business Programming\Code Review WebRoot\Code Review WebRoot\" & loggedInName
            If Dir(OpenFileDialog1.InitialDirectory, FileAttribute.Directory) = "" Then MkDir(OpenFileDialog1.InitialDirectory) ' if the directory does not exists then make it
        Else
            OpenFileDialog1.InitialDirectory = "N:\Business Programming\Code Review WebRoot\\Code Review WebRoot"
        End If

        OpenFileDialog1.Filter = "HTML files|*.html|Text Files|*.txt|All Files|*.*"
        OpenFileDialog1.Title = "Open File"
        If OpenFileDialog1.ShowDialog() = Windows.Forms.DialogResult.OK Then
            ' insert code to open file from
            SaveFileDialog1.FileName = OpenFileDialog1.FileName
            Dim myStream As New StreamReader(OpenFileDialog1.FileName)
            'read into text box for example
            TextBoxContent.Text = myStream.ReadToEnd
            myStream.Close()
        End If
    End Sub

    Private Sub ButtonSave_Click(sender As System.Object, e As System.EventArgs) Handles ButtonSave.Click
        'I was able to reference my work from http://msdn.microsoft.com/en-us/library/sfezx97z.aspx
        If userType <> "Admin" Then
            SaveFileDialog1.InitialDirectory = "N:\Business Programming\Code Review WebRoot\Code Review WebRoot\" & loggedInName
            If Dir(SaveFileDialog1.InitialDirectory, FileAttribute.Directory) = "" Then MkDir(SaveFileDialog1.InitialDirectory)
            ' if the directory does not exists then make it
        Else
            SaveFileDialog1.InitialDirectory = "D:\Sukhraj Sumal\University\Second Year\Business Programming\Code Review WebRoot"
        End If
        SaveFileDialog1.Filter = "HTML files|*.html|Text Files|*.txt|All Files|*.*"
        'The file type that I have used are both Text and HTML files to uploaded onto the Code Review Site
        SaveFileDialog1.Title = "Save File"
        If SaveFileDialog1.ShowDialog() = Windows.Forms.DialogResult.OK Then
            Dim myStream As New StreamWriter(SaveFileDialog1.FileName)
            'read into text box for example
            myStream.Write(TextBoxContent.Text)
            myStream.Close()
            ' insert code to save file 
            'SaveFileDialog1.FileName
            'read into text box for example
        End If

    End Sub
End Class
Edit User Form

Public Class EditUser

    Private Sub Login_DetailsBindingNavigatorSaveItem_Click(sender As System.Object, e As System.EventArgs) Handles Login_DetailsBindingNavigatorSaveItem.Click
        Me.Validate()
        Me.Login_DetailsBindingSource.EndEdit()
        Me.TableAdapterManager.UpdateAll(Me.Login_DatabaseDataSet)

    End Sub

    Private Sub EditUser_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        'TODO: This line of code loads data into the 'Login_DatabaseDataSet.Login_Details' table. You can move, or remove it, as needed.
        Me.Login_DetailsTableAdapter.Fill(Me.Login_DatabaseDataSet.Login_Details)
    End Sub
End Class
Login Form

Imports System.Data.SqlClient
Imports System.Net.Mail

Public Class Login

    Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles ButtonSubmit.Click
        Dim loginDataSet As DataSet = New DataSet

        OpenConnection()
        GetFilteredData("[Login Details]", "username=""" & TextBoxName.Text & """", loginDataSet)
        If CountRecords(loginDataSet) < 1 Then 'this would 0 based on the fact, the username would not exist in the database
            loggedInName = ""
            failCount += 1
            Me.DialogResult = Windows.Forms.DialogResult.Abort
        ElseIf GetDsValue(1, 3, loginDataSet) = MaskedTextBoxPassword.Text And GetDsValue(1, 4, loginDataSet) < 3 Then 'getting data from the third column for password and also invalid logins are used in this statement
            'MsgBox("'Values from the record matches the said records needed in the form")
            loggedInName = TextBoxName.Text
            userType = GetDsValue(1, 5, loginDataSet)
            UpdateData("[Login Details]", "[Login Details].BadLogin = 0", "[Login Details].Username =""" + TextBoxName.Text + """")
            Me.DialogResult = Windows.Forms.DialogResult.OK
        Else
            loggedInName = ""
            If GetDsValue(1, 5, loginDataSet) <> "Admin" Then
                failCount = GetDsValue(1, 4, loginDataSet)
                failCount += 1
                UpdateData("[Login Details]", "[Login Details].BadLogin = " + failCount.ToString, "[Login Details].Username =""" + TextBoxName.Text + """")
            Else
                Dim adminDataSet As DataSet = New DataSet

                GetFilteredData("[Login Details]", "(BadLogin < 3 AND UserType=""Admin"")", adminDataSet) ' get details for admins who are not locked out
                If CountRecords(adminDataSet) > 1 Then 'U26 If more than 1 then we can increment the failcount 
                    failCount = GetDsValue(1, 4, loginDataSet)
                    failCount += 1
                    UpdateData("[Login Details]", "[Login Details].BadLogin = " + failCount.ToString, "[Login Details].Username =""" + TextBoxName.Text + """")
                Else
                    failCount += 1
                End If
            End If
            Me.DialogResult = Windows.Forms.DialogResult.Abort
            End If
        CloseCon()
        Me.Close()

    End Sub

    Private Sub ButtonRequest_Click(sender As System.Object, e As System.EventArgs) Handles ButtonRequest.Click
        'I was able to look at the video about adding comments to an email address from www.youtube.com/watch?v=MlFm_Jb3Fhg
        'The video helped me create a form, which allows the user to add comments, which would be sent as an email.
        'This can also be related to a blacklist or resetting an account within the system, it easier to use a Google Email Address
        Dim MyMailMessage As New MailMessage()

        Try
            MyMailMessage.From = New MailAddress("captsumal@gmail.com")     'User Email address (CaptSumal is a default within code)
            MyMailMessage.To.Add("captsumal@gmail.com")   'The message from User Email Address goes here.
            MyMailMessage.Subject = "Reset request for " + TextBoxName.Text       'where user inserts email address
            MyMailMessage.Body = "Please could you reset logins for " + TextBoxName.Text        'where user insert their information
            Dim SMTP As New SmtpClient("smtp.gmail.com")
            SMTP.Port = 587
            SMTP.EnableSsl = True
            SMTP.Credentials = New System.Net.NetworkCredential("captsumal@gmail.com", "batman99") 'User email account details
            SMTP.Send(MyMailMessage)

            MessageBox.Show("Reset request has now been sent")
            Me.Close()

        Catch ex As Exception

        End Try

    End Sub

    Private Sub TextBoxName_TextChanged(sender As System.Object, e As System.EventArgs) Handles TextBoxName.TextChanged

    End Sub
End Class
Logout Form

Public Class Logout

    Private Sub Logout_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load

    End Sub

    Private Sub No_Click(sender As System.Object, e As System.EventArgs) Handles No.Click
        Me.Close()
    End Sub

    Private Sub Yes_Click(sender As System.Object, e As System.EventArgs) Handles Yes.Click
        loggedInName = ""
        Me.DialogResult = Windows.Forms.DialogResult.Yes
        Me.Close()
        'To help me close the log out stages of the code used above, I looked at the website
        'www.dreamincode.net/forums/topic/46436-close-whole-application/

        'this website helped me to close both logout and dashboard forms within the code review site.
    End Sub
End Class

Global Variables

Module globals
    Public loggedInName As String = "" ' current logged in user
    Public failCount As Integer = 0   ' times failed
    Public userType As String ' type of user
End Module


